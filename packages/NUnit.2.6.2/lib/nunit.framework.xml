
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Used to mark an array as containing a set of datapoints to be used
            executing a theory within the same fixture that requires an argument 
            of the Type of the array elements.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct the attribute
            </summary>
            <param name="description">Text describing the test</param>
        </member>
        <member name="P:NUnit.Framework.DescriptionAttribute.Description">
            <summary>
            Gets the test description
            </summary>
        </member>
        <member name="T:NUnit.Framework.MessageMatch">
            <summary>
            Enumeration indicating how the expected message parameter is to be used
            </summary>
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Exact">
            Expect an exact match
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Contains">
            Expect a message containing the parameter string
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Regex">
            Match the regular expression provided as a parameter
        </member>
        <member name="F:NUnit.Framework.MessageMatch.StartsWith">
            Expect a message that starts with the parameter string
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor">
            <summary>
            Constructor for a non-specific exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message text
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.UserMessage">
            <summary>
            Gets or sets the user message displayed in case of failure
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.Handler">
            <summary>
             Gets the name of a method to be used as an exception handler
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="P:NUnit.Framework.ExplicitAttribute.Reason">
            <summary>
            The reason test is marked explicit
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Constructs the attribute without giving a reason 
            for ignoring the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Reason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument data 
            provided. NUnit will create a test case for every combination of 
            the arguments provided. This can result in a large number of test
            cases and so should be used judiciously. This is the default join
            type, so the attribute need not be used except as documentation.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test to use pairwise join of any argument data provided. 
            NUnit will attempt too excercise every pair of argument values at 
            least once, using as small a number of test cases as it can. With
            only two arguments, this is the same as a combinatorial join.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a sequential join of any argument data
            provided. NUnit will use arguements for each parameter in
            sequence, generating test cases up to the largest number
            of argument values provided and using null for any arguments
            for which it runs out of values. Normally, this should be
            used with the same number of arguments for each parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Summary description for MaxTimeAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            RandomAttribute is used to supply a set of random values
            to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ParameterDataAttribute">
            <summary>
            Abstract base class for attributes that apply to parameters 
            and supply data for the parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParameterDataAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Gets the data to be provided to the specified parameter
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a set of doubles from 0.0 to 1.0,
            specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Construct a set of doubles from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a set of ints from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            RangeAttribute is used to supply a range of values to an
            individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a range of ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a range of ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construct a range of longs
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a range of doubles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a range of floats
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute">
            <summary>
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="T:NUnit.Framework.RequiredAddinAttribute">
            <summary>
            RequiredAddinAttribute may be used to indicate the names of any addins
            that must be present in order to run some or all of the tests in an
            assembly. If the addin is not loaded, the entire assembly is marked
            as NotRunnable.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiredAddinAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RequiredAddinAttribute"/> class.
            </summary>
            <param name="requiredAddin">The required addin.</param>
        </member>
        <member name="P:NUnit.Framework.RequiredAddinAttribute.RequiredAddin">
            <summary>
            Gets the name of required addin.
            </summary>
            <value>The required addin name.</value>
        </member>
        <member name="T:NUnit.Framework.SetCultureAttribute">
            <summary>
            Summary description for SetCultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetCultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUICultureAttribute">
            <summary>
            Summary description for SetUICultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetUICultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            SetUpAttribute is used in a TestFixture to identify a method
            that is called immediately before each test is run. It is 
            also used in a SetUpFixture to identify the method that is
            called once, before any of the subordinate tests are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuiteAttribute">
            <summary>
            Attribute used to mark a static (shared in VB) property
            that returns a list of tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used in a TestFixture to identify a method that is 
            called immediately after each test is run. It is also used
            in a SetUpFixture to identify the method that is called once,
            after all subordinate tests have run. In either case, the method 
            is guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestActionAttribute">
            <summary>
            Provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestAction">
            <summary>
            When implemented by an attribute, this interface implemented to provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ITestAction.BeforeTest(NUnit.Framework.TestDetails)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="testDetails">Provides details about the test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.ITestAction.AfterTest(NUnit.Framework.TestDetails)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="testDetails">Provides details about the test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.ITestAction.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
            <returns>The target for the action attribute</returns>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            
            NOTE: This interface is used in both the framework
            and the core, even though that results in two different
            types. However, sharing the source code guarantees that
            the various implementations will be compatible and that
            the core is able to reflect successfully over the
            framework implementations of ITestCaseData.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Result">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.HasExpectedResult">
            <summary>
            Indicates whether a result has been specified.
            This is necessary because the result may be
            null, so it's value cannot be checked.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedException">
            <summary>
             Gets the expected exception Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedExceptionName">
            <summary>
            Gets the FullName of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Description">
            <summary>
            Gets the description of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Explicit">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is explicit.
            </summary>
            <value><c>true</c> if explicit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Result">
            <summary>
            Gets or sets the expected result. Use
            ExpectedResult by preference.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.HasExpectedResult">
            <summary>
            Gets a flag indicating whether an expected
            result has been set.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Categories">
            <summary>
            Gets a list of categories associated with this test;
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception.
            </summary>
            <value>The expected exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the name the expected exception.
            </summary>
            <value>The expected name of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message of the expected exception
            </summary>
            <value>The expected message of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignored">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Explicit">
            <summary>
            Gets or sets the explicit status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets or sets the reason for not running the test.
            Set has the side effect of marking the test as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            FactoryAttribute indicates the source to be used to
            provide test cases for a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the data source, which must
            be a property, field or method of the test class itself.
            </summary>
            <param name="sourceName">An array of the names of the factories that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type, which must implement IEnumerable
            </summary>
            <param name="sourceType">The Type that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name.
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Categories">
            <summary>
            Gets a list of categories for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Arguments">
            <summary>
            The arguments originally provided to the attribute
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestFixtureAttribute"/> should be ignored.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. May set Ignored as a side effect.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TypeArgs">
            <summary>
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TheoryAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="T:NUnit.Framework.TimeoutAttribute">
            <summary>
            Used on a method, marks the test with a timeout value in milliseconds. 
            The test will be run in a separate thread and is cancelled if the timeout 
            is exceeded. Used on a method or assembly, sets the default timeout 
            for all contained test methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Construct a TimeoutAttribute given a time in milliseconds
            </summary>
            <param name="timeout">The timeout value in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.RequiresSTAAttribute">
            <summary>
            Marks a test that must run in the STA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use STAThreadAttribute
            to serve the same purpose.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresSTAAttribute.#ctor">
            <summary>
            Construct a RequiresSTAAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.RequiresMTAAttribute">
            <summary>
            Marks a test that must run in the MTA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use MTAThreadAttribute
            to serve the same purpose.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresMTAAttribute.#ctor">
            <summary>
            Construct a RequiresMTAAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.RequiresThreadAttribute">
            <summary>
            Marks a test that must run on a separate thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor">
            <summary>
            Construct a RequiresThreadAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor(System.Threading.ApartmentState)">
            <summary>
            Construct a RequiresThreadAttribute, specifying the apartment
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValueSourceAttribute">
            <summary>
            ValueSourceAttribute indicates the source to be used to
            provide data for one parameter of a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">The name of the data source to be used</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeExistsConstraint">
            <summary>
            AttributeExistsConstraint tests for the presence of a
            specified attribute on  a Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine 
            constraints.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IResolveConstraint">
            <summary>
            The IConstraintExpression interface is implemented by all
            complete and resolvable constraints and expressions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IResolveConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.UNSET">
            <summary>
            Static UnsetObject used to detect derived constraints
            failing to set the actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.actual">
            <summary>
            The actual value being tested against a constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.displayName">
            <summary>
            The display name of this Constraint for use by ToString()
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.argcnt">
            <summary>
            Argument fields used by ToString();
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.builder">
            <summary>
            The builder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor">
            <summary>
            Construct a constraint with no arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object)">
            <summary>
            Construct a constraint with one argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object,System.Object)">
            <summary>
            Construct a constraint with two arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.SetBuilder(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Sets the ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the constraint and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by an
            ActualValueDelegate that returns the value to be tested.
            The default implementation simply evaluates the delegate
            but derived classes may override it to provide for delayed 
            processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ToString">
            <summary>
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32,System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time
            and polling interval.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <param name="pollingInterval">The interval at which to test the constraint.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.And">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.With">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Or">
            <summary>
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint.UnsetObject">
            <summary>
            Class used to detect any derived constraints
            that fail to set the actual value in their
            Matches override.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.#ctor(System.Type)">
            <summary>
            Constructs an AttributeExistsConstraint for a specific attribute Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.Matches(System.Object)">
            <summary>
            Tests whether the object provides the expected attribute.
            </summary>
            <param name="actual">A Type, MethodInfo, or other ICustomAttributeProvider</param>
            <returns>True if the expected attribute is present, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description of the constraint to the specified writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeConstraint">
            <summary>
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.baseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="resolvable"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.#ctor(System.Type,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Constructs an AttributeConstraint for a specified attriute
            Type and base constraint.
            </summary>
            <param name="type"></param>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.Matches(System.Object)">
            <summary>
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes a description of the attribute to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the actual value supplied to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.GetStringRepresentation">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BasicConstraint">
            <summary>
            BasicConstraint is the abstract base for constraints that
            perform a simple comparison to a constant value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullConstraint">
            <summary>
            NullConstraint tests that the actual value is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NullConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TrueConstraint">
            <summary>
            TrueConstraint tests that the actual value is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrueConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FalseConstraint">
            <summary>
            FalseConstraint tests that the actual value is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FalseConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NaNConstraint">
            <summary>
            NaNConstraint tests that the actual value is a double or float NaN
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.Matches(System.Object)">
            <summary>
            Test that the actual value is an NaN
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryConstraint">
            <summary>
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a BinaryConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.Matches(System.Object)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.Matches(System.Object)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            	<c>true</c> if the specified enumerable is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
            <summary>
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(System.Object,System.Object)">
            <summary>
            Compares two collection members for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable)">
            <summary>
            Return a new CollectionTally for use in making tests
            </summary>
            <param name="c">The collection to be included in the tally</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyCollectionConstraint">
            <summary>
            EmptyCollectionConstraint tests whether a collection is empty. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that the collection is empty
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that all items are unique.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a descripton of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentCOnstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionEquivalentConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint">
            <summary>
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.#ctor">
            <summary>
            Construct a CollectionOrderedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.By(System.String)">
            <summary>
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the collection is ordered
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending">
            <summary>
             If used performs a reverse comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionTally">
            <summary>
            CollectionTally counts (tallies) the number of
            occurences of each object in one or more enumerations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.#ctor(NUnit.Framework.Constraints.NUnitEqualityComparer,System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionTally object from a comparer and a collection
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Object)">
            <summary>
            Try to remove an object from the tally
            </summary>
            <param name="o">The object to remove</param>
            <returns>True if successful, false if the object was not found</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Collections.IEnumerable)">
            <summary>
            Try to remove a set of objects from the tally
            </summary>
            <param name="c">The objects to remove</param>
            <returns>True if successful, false if any object was not found</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.Count">
            <summary>
            The number of objects remaining in the tally
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter">
            <summary>
            ComparisonAdapter class centralizes all comparisons of
            values in NUnit, adapting to the use of any provided
            IComparer, IComparer&lt;T&gt; or Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonAdapter.Default">
            <summary>
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a ComparisonAdapter for an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.DefaultComparisonAdapter.#ctor">
            <summary>
            Construct a default ComparisonAdapter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            ComparisonAdapter&lt;T&gt; extends ComparisonAdapter and
            allows use of an IComparer&lt;T&gt; or Comparison&lt;T&gt;
            to actually perform the comparison.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct a ComparisonAdapter for an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.#ctor(System.Comparison{`0})">
            <summary>
            Construct a ComparisonAdapter for a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other. This class supplies the Using modifiers.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.comparer">
            <summary>
            ComparisonAdapter to be used in making the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ActualValueDelegate">
            <summary>
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reognized. a ConstraintStack holds 
            input constraints as well as the results of each
            operator applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            </summary>
            <param name="op">The operator to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends the specified constraint to the expresson by pushing
            it on the constraint stack.
            </summary>
            <param name="constraint">The constraint to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SetTopOperatorRightContext(System.Object)">
            <summary>
            Sets the top operator right context.
            </summary>
            <param name="rightContext">The right context.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ReduceOperatorStack(System.Int32)">
            <summary>
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            </summary>
            <param name="targetPrecedence">The target precedence.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve">
            <summary>
            Resolves this instance, returning a Constraint. If the builder
            is not currently in a resolvable state, an exception is thrown.
            </summary>
            <returns>The resolved constraint</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.IsResolvable">
            <summary>
            Gets a value indicating whether this instance is resolvable.
            </summary>
            <value>
            	<c>true</c> if this instance is resolvable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack">
            <summary>
            OperatorStack is a type-safe stack for holding ConstraintOperators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Push(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Pushes the specified operator onto the stack.
            </summary>
            <param name="op">The op.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Pop">
            <summary>
            Pops the topmost operator from the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:OpStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Top">
            <summary>
            Gets the topmost operator without modifying the stack.
            </summary>
            <value>The top.</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack">
            <summary>
            ConstraintStack is a type-safe stack for holding Constraints
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Pushes the specified constraint. As a side effect,
            the constraint's builder field is set to the 
            ConstraintBuilder owning this stack.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop">
            <summary>
            Pops this topmost constrait from the stack.
            As a side effect, the constraint's builder
            field is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:ConstraintStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Top">
            <summary>
            Gets the topmost constraint without modifying the stack.
            </summary>
            <value>The topmost constraint</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpression">
            <summary>
            ConstraintExpression represents a compound constraint in the 
            process of being constructed from a series of syntactic elements.
            
            Individual elements are appended to the expression as they are
            reognized. Once an actual Constraint is appended, the expression
            returns a resolvable Constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpressionBase">
            <summary>
            ConstraintExpressionBase is the abstract base class for the 
            ConstraintExpression class, which represents a 
            compound constraint in the process of being constructed 
            from a series of syntactic elements.
            
            NOTE: ConstraintExpressionBase is separate because the
            ConstraintExpression class was generated in earlier
            versions of NUnit. The two classes may be combined
            in a future version.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintExpressionBase.builder">
            <summary>
            The ConstraintBuilder holding the elements recognized so far
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.ToString">
            <summary>
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends an operator to the expression and returns the
            resulting expression itself.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.SelfResolvingOperator)">
            <summary>
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubPath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange``1(``0,``0)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.With">
            <summary>
            With is currently a NOP - reserved for future use.
            </summary>