
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Used to mark an array as containing a set of datapoints to be used
            executing a theory within the same fixture that requires an argument 
            of the Type of the array elements.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct the attribute
            </summary>
            <param name="description">Text describing the test</param>
        </member>
        <member name="P:NUnit.Framework.DescriptionAttribute.Description">
            <summary>
            Gets the test description
            </summary>
        </member>
        <member name="T:NUnit.Framework.MessageMatch">
            <summary>
            Enumeration indicating how the expected message parameter is to be used
            </summary>
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Exact">
            Expect an exact match
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Contains">
            Expect a message containing the parameter string
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Regex">
            Match the regular expression provided as a parameter
        </member>
        <member name="F:NUnit.Framework.MessageMatch.StartsWith">
            Expect a message that starts with the parameter string
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor">
            <summary>
            Constructor for a non-specific exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message text
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.UserMessage">
            <summary>
            Gets or sets the user message displayed in case of failure
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.Handler">
            <summary>
             Gets the name of a method to be used as an exception handler
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="P:NUnit.Framework.ExplicitAttribute.Reason">
            <summary>
            The reason test is marked explicit
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Constructs the attribute without giving a reason 
            for ignoring the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Reason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument data 
            provided. NUnit will create a test case for every combination of 
            the arguments provided. This can result in a large number of test
            cases and so should be used judiciously. This is the default join
            type, so the attribute need not be used except as documentation.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test to use pairwise join of any argument data provided. 
            NUnit will attempt too excercise every pair of argument values at 
            least once, using as small a number of test cases as it can. With
            only two arguments, this is the same as a combinatorial join.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a sequential join of any argument data
            provided. NUnit will use arguements for each parameter in
            sequence, generating test cases up to the largest number
            of argument values provided and using null for any arguments
            for which it runs out of values. Normally, this should be
            used with the same number of arguments for each parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Summary description for MaxTimeAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            RandomAttribute is used to supply a set of random values
            to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ParameterDataAttribute">
            <summary>
            Abstract base class for attributes that apply to parameters 
            and supply data for the parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParameterDataAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Gets the data to be provided to the specified parameter
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a set of doubles from 0.0 to 1.0,
            specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Construct a set of doubles from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a set of ints from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            RangeAttribute is used to supply a range of values to an
            individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a range of ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a range of ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construct a range of longs
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a range of doubles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a range of floats
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute">
            <summary>
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="T:NUnit.Framework.RequiredAddinAttribute">
            <summary>
            RequiredAddinAttribute may be used to indicate the names of any addins
            that must be present in order to run some or all of the tests in an
            assembly. If the addin is not loaded, the entire assembly is marked
            as NotRunnable.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiredAddinAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RequiredAddinAttribute"/> class.
            </summary>
            <param name="requiredAddin">The required addin.</param>
        </member>
        <member name="P:NUnit.Framework.RequiredAddinAttribute.RequiredAddin">
            <summary>
            Gets the name of required addin.
            </summary>
            <value>The required addin name.</value>
        </member>
        <member name="T:NUnit.Framework.SetCultureAttribute">
            <summary>
            Summary description for SetCultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetCultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUICultureAttribute">
            <summary>
            Summary description for SetUICultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetUICultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            SetUpAttribute is used in a TestFixture to identify a method
            that is called immediately before each test is run. It is 
            also used in a SetUpFixture to identify the method that is
            called once, before any of the subordinate tests are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuiteAttribute">
            <summary>
            Attribute used to mark a static (shared in VB) property
            that returns a list of tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used in a TestFixture to identify a method that is 
            called immediately after each test is run. It is also used
            in a SetUpFixture to identify the method that is called once,
            after all subordinate tests have run. In either case, the method 
            is guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestActionAttribute">
            <summary>
            Provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestAction">
            <summary>
            When implemented by an attribute, this interface implemented to provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ITestAction.BeforeTest(NUnit.Framework.TestDetails)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="testDetails">Provides details about the test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.ITestAction.AfterTest(NUnit.Framework.TestDetails)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="testDetails">Provides details about the test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.ITestAction.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
            <returns>The target for the action attribute</returns>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            
            NOTE: This interface is used in both the framework
            and the core, even though that results in two different
            types. However, sharing the source code guarantees that
            the various implementations will be compatible and that
            the core is able to reflect successfully over the
            framework implementations of ITestCaseData.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Result">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.HasExpectedResult">
            <summary>
            Indicates whether a result has been specified.
            This is necessary because the result may be
            null, so it's value cannot be checked.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedException">
            <summary>
             Gets the expected exception Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedExceptionName">
            <summary>
            Gets the FullName of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Description">
            <summary>
            Gets the description of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Explicit">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is explicit.
            </summary>
            <value><c>true</c> if explicit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Result">
            <summary>
            Gets or sets the expected result. Use
            ExpectedResult by preference.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.HasExpectedResult">
            <summary>
            Gets a flag indicating whether an expected
            result has been set.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Categories">
            <summary>
            Gets a list of categories associated with this test;
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception.
            </summary>
            <value>The expected exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the name the expected exception.
            </summary>
            <value>The expected name of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message of the expected exception
            </summary>
            <value>The expected message of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignored">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Explicit">
            <summary>
            Gets or sets the explicit status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets or sets the reason for not running the test.
            Set has the side effect of marking the test as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            FactoryAttribute indicates the source to be used to
            provide test cases for a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the data source, which must
            be a property, field or method of the test class itself.
            </summary>
            <param name="sourceName">An array of the names of the factories that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type, which must implement IEnumerable
            </summary>
            <param name="sourceType">The Type that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name.
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>